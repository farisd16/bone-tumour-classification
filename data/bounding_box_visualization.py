import json
import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
from random import sample


"""
BTXRD Annotation Visualizer
---------------------------
This script visualizes annotated tumour regions from the BTXRD bone tumour dataset. 
It randomly samples annotation files (JSON format generated by LabelMe), overlays 
the corresponding shapes (polygons or rectangles) on their associated X-ray images, 
and displays one example per tumour class.

"""


# === Paths ===
base_dir = os.path.dirname(__file__)
json_folder = os.path.join(base_dir, "BTXRD", "Annotations")
image_folder = os.path.join(base_dir, "BTXRD", "images")

# === Collect all JSON files ===
json_files = [f for f in os.listdir(json_folder) if f.endswith(".json")]


classes = [
    "osteochondroma",
    "osteosarcoma",
    "multiple osteochondromas",
    "simple bone cyst",
    "giant cell tumor",
    "synovial osteochondroma",
    "osteofibroma",
]

i = 0

json_files.sort()

# diff_list = []  for debugging
# === Loop through dataset ===
for json_name in json_files:
    json_path = os.path.join(json_folder, json_name)
    image_name = json_name.replace(".json", ".jpeg")
    image_path = os.path.join(image_folder, image_name)

    # Load JSON
    with open(json_path, "r") as f:
        data = json.load(f)

    # Get label from first shape
    label = data["shapes"][0]["label"].lower()

    # Skip if label not in target classes
    if label not in classes:
        continue

    # --- Load and visualize ---
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    overlay = image.copy()


    # To store all of the tumour points
    all_pts = []

    for s in data["shapes"]:    
        pts = np.array(s["points"], np.int32)
        all_pts.append(pts)
        if s["shape_type"] == "polygon":
            cv2.polylines(overlay, [pts], True, (255, 0, 0), 3)
            cv2.fillPoly(overlay, [pts], (255, 0, 0, 50))
        elif s["shape_type"] == "rectangle":
            (x1, y1), (x2, y2) = pts
            cv2.rectangle(overlay, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 3)

    # Combine all shapesâ€™ points into one big array
    all_pts = np.concatenate(all_pts, axis=0)
    x_min, x_max = np.min(all_pts[:, 0]), np.max(all_pts[:, 0])
    y_min, y_max = np.min(all_pts[:, 1]), np.max(all_pts[:, 1])

    margin = 0.10
    w, h = x_max - x_min, y_max - y_min
    size = max(w, h) * (1 + margin)
    cx, cy = (x_min + x_max) / 2, (y_min + y_max) / 2
    x1, y1 = int(cx - size / 2), int(cy - size / 2)
    x2, y2 = int(cx + size / 2), int(cy + size / 2)

    
    H, W, _ = image.shape

    # Clip to image boundaries first
    x1 = max(0, x1)
    y1 = max(0, y1)
    x2 = min(W, x2)
    y2 = min(H, y2)

    # Compute width and height
    w = x2 - x1
    h = y2 - y1

    #print(f"Old_{json_name}: {w}, {h}")     for debugging

    # --- Make square by expanding to larger side ---
    if w != h:
        side = max(w, h)
        cx = (x1 + x2) // 2
        cy = (y1 + y2) // 2

        # Recalculate a centered square
        x1 = int(cx - side / 2)
        y1 = int(cy - side / 2)
        x2 = int(cx + side / 2)
        y2 = int(cy + side / 2)

        # --- Adjust if box goes beyond image boundaries ---
        if x1 < 0:
            x2 -= x1
            x1 = 0
        if y1 < 0:
            y2 -= y1
            y1 = 0
        if x2 > W:
            diff = x2 - W
            x1 -= diff
            x2 = W
        if y2 > H:
            diff = y2 - H
            y1 -= diff
            y2 = H

    
    #w_new = x2 - x1    for debugging
    #h_new = y2 - y1    for debugging

   #print(f"New_{json_name}: {w_new}, {h_new}")    for debugging

    cv2.rectangle(overlay, (x1, y1), (x2, y2), (255, 255, 0), 3)

    # Label text
    cv2.putText(
        overlay,
        label,
        (x1, max(0, y1 - 10)),
        cv2.FONT_HERSHEY_SIMPLEX,
        1,
        (255, 255, 0),
        2,
    )

    # Blend overlay
    alpha = 0.4
    blended = cv2.addWeighted(overlay, alpha, image, 1 - alpha, 0)


    """
    for debugging
    
    if w_new - h_new != 0:
        i += 1
        diff_list.append(w_new - h_new)
        if w_new - h_new > 5:
            print(f"Old_{json_name}: {w}, {h}")
            print(f"New_{json_name}: {w_new}, {h_new}")
            
            # Plot
            plt.figure(figsize=(8, 8))
            plt.imshow(blended)
            plt.axis("off")
            plt.title(f"Class: {label}")
            plt.show()
        
    """    
