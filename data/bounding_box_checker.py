import json
import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
from random import sample
import pandas as pd

"""
BTXRD Annotation Visualizer
---------------------------
This script visualizes annotated tumour regions from the BTXRD bone tumour dataset. 
It randomly samples annotation files (JSON format generated by LabelMe), overlays 
the corresponding shapes (polygons or rectangles) on their associated X-ray images, 
and displays one example per tumour class.

"""


# === Paths ===
base_dir = os.path.dirname(__file__)
json_folder = os.path.join(base_dir, "BTXRD", "Annotations")
image_folder = os.path.join(base_dir, "BTXRD", "images")

# === Collect all JSON files ===
json_files = [f for f in os.listdir(json_folder) if f.endswith(".json")]

classes = [
    "osteochondroma",
    "osteosarcoma",
    "multiple osteochondromas",
    "simple bone cyst",
    "giant cell tumor",
    "synovial osteochondroma",
    "osteofibroma",
]



records = []
# === Loop through dataset ===
for json_name in json_files:

    json_path = os.path.join(json_folder, json_name)
    image_name = json_name.replace(".json", ".jpeg")
    image_path = os.path.join(image_folder, image_name)

    # Load JSON
    with open(json_path, "r") as f:
        data = json.load(f)

    # Get label from first shape
    label = data["shapes"][0]["label"].lower()

    # Skip if label not in target classes
    if label not in classes:
        continue

    # --- Load and visualize ---
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    overlay = image.copy()


    # To store all of the tumour points
    all_pts = []

    for s in data["shapes"]:    
        pts = np.array(s["points"], np.int32)
        all_pts.append(pts)
        if s["shape_type"] == "polygon":
            cv2.polylines(overlay, [pts], True, (255, 0, 0), 3)
            cv2.fillPoly(overlay, [pts], (255, 0, 0, 50))
        elif s["shape_type"] == "rectangle":
            (x1, y1), (x2, y2) = pts
            cv2.rectangle(overlay, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 3)

    # --- Combine all shapes’ points into one big array ---
    all_pts = np.concatenate(all_pts, axis=0)
    x_min, x_max = np.min(all_pts[:, 0]), np.max(all_pts[:, 0])
    y_min, y_max = np.min(all_pts[:, 1]), np.max(all_pts[:, 1])

    margin = 0.10

    # --- Step 1: Compute tumour region ---
    w_tumour, h_tumour = x_max - x_min, y_max - y_min

    # --- Step 2: Expand with margin ---
    size = max(w_tumour, h_tumour) * (1 + margin)

    cx, cy = (x_min + x_max) / 2, (y_min + y_max) / 2

    side = int(round(size))
    x1 = int(round(cx - side / 2))
    y1 = int(round(cy - side / 2))
    x2 = x1 + side
    y2 = y1 + side

    w, h = x2 - x1, y2 - y1

    cv2.rectangle(overlay, (x1, y1), (x2, y2), (255, 255, 0), 3)

    # Label text
    cv2.putText(
        overlay,
        label,
        (x1, max(0, y1 - 10)),
        cv2.FONT_HERSHEY_SIMPLEX,
        1,
        (255, 255, 0),
        2,
    )

    # Blend overlay
    alpha = 0.4
    blended = cv2.addWeighted(overlay, alpha, image, 1 - alpha, 0)
    

    # --- Check if bounding box exceeds image boundaries ---
    H, W, _ = overlay.shape
    out_of_bounds = x1 < 0 or y1 < 0 or x2 > W or y2 > H

    if out_of_bounds:
        records.append({
            "filename": json_name,
            "label": label,
            "Original_image_width": W,
            "Original_image_height": H,
            "x1_tumour": x1,
            "y1_tumour": y1,
            "x2_tumour": x2,
            "y2_tumour": y2,
            "box_width": w,
            "box_height": h,
            "out_of_bounds": out_of_bounds
        })

records.sort()
# === After the loop ===
print("\n=== SUMMARY ===")
print(f"Total images checked: {len(json_files)}")
print(f"Images with bounding box exceeding bounds: {len(records)}")

# === Save CSV report ===
csv_path = os.path.join(base_dir, "bounding_box_issues.csv")
df = pd.DataFrame(records)
df.to_csv(csv_path, index=False)
print(f"\n✅ Report saved to: {csv_path}")